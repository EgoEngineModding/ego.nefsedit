// See LICENSE.txt for license information.

using VictorBush.Ego.NefsLib.DataSource;
using VictorBush.Ego.NefsLib.Header.Builder;
using VictorBush.Ego.NefsLib.Header.Version150;
using VictorBush.Ego.NefsLib.Header.Version160;
using VictorBush.Ego.NefsLib.Item;
using VictorBush.Ego.NefsLib.Progress;
using VictorBush.Ego.NefsLib.Tests.DataSource;
using Xunit;

namespace VictorBush.Ego.NefsLib.Tests.Header.Builder;

public class NefsHeaderBuilder160Tests
{
	[Fact]
	public void Build_SharedEntryInfoTable_NoItems_EntriesEmpty()
	{
		var items = new NefsItemList(@"C:\archive.nefs");
		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());
		Assert.Empty(header.SharedEntryInfoTable.Entries);
	}

	[Fact]
	public void Build_SharedEntryInfoTable_MultipleItems_EntriesPopulated()
	{
		var items = new NefsItemList(@"C:\archive.nefs");

		var file1Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 11, 12, 13 }, TestHelpers.TestTransform);
		var file1DataSource = new NefsItemListDataSource(items, 123, new NefsItemSize(456, file1Chunks));
		var file1 = TestHelpers.CreateFile(0, 0, "file1", file1DataSource);
		items.Add(file1);

		var file2Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 14, 15, 16 }, TestHelpers.TestTransform);
		var file2DataSource = new NefsItemListDataSource(items, 456, new NefsItemSize(789, file2Chunks));
		var file2 = TestHelpers.CreateFile(1, 1, "file2", file2DataSource);
		items.Add(file2);

		var dir1 = TestHelpers.CreateDirectory(2, 2, "dir1");
		items.Add(dir1);

		var file3Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 22, 23, 24 }, TestHelpers.TestTransform);
		var file3DataSource = new NefsItemListDataSource(items, 222, new NefsItemSize(333, file3Chunks));
		var file3 = TestHelpers.CreateFile(3, dir1.Id.Value, "file3", file3DataSource);
		items.Add(file3);

		var file4 = TestHelpers.CreateFile(4, 4, file1.FileName, file1DataSource, file1.Id.Value);
		items.Add(file4);

		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());
		var p2 = header.SharedEntryInfoTable;

		Assert.Equal(4, p2.Entries.Count);

		// NOTE: Part 3 is the strings table. So offset into p3 must take into account null terminated file/dir names.
		// Also note strings table is alphabetized. Also note the data file name is added to the strings table.

		// NOTE: The order of part 2 is generated by depth first traversal of the file tree, with items sorted by filename.

		/*
		dir1
		*/

		Assert.Equal(2, (int)p2.Entries[0].FirstDuplicate);
		Assert.Equal(2, (int)p2.Entries[0].Parent);
		Assert.Equal(3, (int)p2.Entries[0].FirstChild);
		Assert.Equal(0, (int)p2.Entries[0].Size);
		Assert.Equal(13, (int)p2.Entries[0].NameOffset);

		/*
		file3
		*/

		Assert.Equal(3, (int)p2.Entries[1].FirstDuplicate);
		Assert.Equal(2, (int)p2.Entries[1].Parent);
		Assert.Equal(3, (int)p2.Entries[1].FirstChild);
		Assert.Equal(333, (int)p2.Entries[1].Size);
		Assert.Equal(30, (int)p2.Entries[1].NameOffset);

		/*
		file1
		*/

		Assert.Equal(0, (int)p2.Entries[2].FirstDuplicate);
		Assert.Equal(0, (int)p2.Entries[2].Parent);
		Assert.Equal(0, (int)p2.Entries[2].FirstChild);
		Assert.Equal(456, (int)p2.Entries[2].Size);
		Assert.Equal(18, (int)p2.Entries[2].NameOffset);

		/*
		file2
		*/

		Assert.Equal(1, (int)p2.Entries[3].FirstDuplicate);
		Assert.Equal(1, (int)p2.Entries[3].Parent);
		Assert.Equal(1, (int)p2.Entries[3].FirstChild);
		Assert.Equal(789, (int)p2.Entries[3].Size);
		Assert.Equal(24, (int)p2.Entries[3].NameOffset);
	}

	[Fact]
	public void Build_WriteableEntryTable_NoItems_EntriesEmpty()
	{
		var items = new NefsItemList(@"C:\archive.nefs");
		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());
		Assert.Empty(header.WriteableEntryTable.Entries);
	}

	[Fact]
	public void Build_WriteableEntryTable_FlagsSet()
	{
		var items = new NefsItemList(@"C:\archive.nefs");

		var item1Attributes = new NefsItemAttributes(
			v16IsTransformed: true,
			isDirectory: true,
			isDuplicated: true,
			isCacheable: true,
			isPatched: true)
		{
			IsLastSibling = true
		};
		var item1DataSource = new NefsItemListDataSource(items, 123, new NefsItemSize(456));
		var item1 = new NefsItem(new NefsItemId(0), "file1", new NefsItemId(0), item1DataSource, TestHelpers.TestTransform, item1Attributes);
		items.Add(item1);

		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());

		Assert.Equal(0x3F, header.WriteableEntryTable.Entries[0].Flags);
	}

	[Fact]
	public void Build_WriteableEntryTable_MultipleItems_EntriesPopulated()
	{
		var items = new NefsItemList(@"C:\archive.nefs");

		var file1Attributes = new NefsItemAttributes(
			part6Volume: 12);
		var file1Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 11, 12, 13 }, TestHelpers.TestTransform);
		var file1DataSource = new NefsItemListDataSource(items, 123, new NefsItemSize(456, file1Chunks));
		var file1 = new NefsItem(new NefsItemId(0), "file1", new NefsItemId(0), file1DataSource, TestHelpers.TestTransform, file1Attributes);
		items.Add(file1);

		var file2Attributes = new NefsItemAttributes(
			part6Volume: 6);
		var file2Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 14, 15, 16 }, TestHelpers.TestTransform);
		var file2DataSource = new NefsItemListDataSource(items, 456, new NefsItemSize(789, file2Chunks));
		var file2 = new NefsItem(new NefsItemId(1), "file2", new NefsItemId(1), file2DataSource, TestHelpers.TestTransform, file2Attributes);
		items.Add(file2);

		var dir1Attributes = new NefsItemAttributes(
			isDirectory: true,
			part6Volume: 1);
		var dir1DataSource = new NefsEmptyDataSource();
		var dir1 = new NefsItem(new NefsItemId(2), "dir1", new NefsItemId(2), dir1DataSource, null, dir1Attributes);
		items.Add(dir1);

		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());
		var p6 = header.WriteableEntryTable;

		Assert.Equal(3, p6.Entries.Count);
		Assert.Equal(3, p6.Entries.Count);

		/*
		file1
		*/

		Assert.Equal(file1Attributes.Part6Volume, p6.Entries[file1.Id.Index].Volume);

		/*
		file2
		*/

		Assert.Equal(file2Attributes.Part6Volume, p6.Entries[file2.Id.Index].Volume);

		/*
		dir1
		*/

		Assert.Equal(dir1Attributes.Part6Volume, p6.Entries[dir1.Id.Index].Volume);
		Assert.True(((NefsTocEntryFlags150)p6.Entries[dir1.Id.Index].Flags).HasFlag(NefsTocEntryFlags150.Directory));
	}

	[Fact]
	public void Build_WriteableSharedEntryInfoTable_NoItems_EntriesEmpty()
	{
		var items = new NefsItemList(@"C:\archive.nefs");
		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());
		Assert.Empty(header.WriteableSharedEntryInfoTable.Entries);
	}

	[Fact]
	public void Build_WriteableSharedEntryInfoTable_MultipleItems_EntriesPopulated()
	{
		var items = new NefsItemList(@"C:\archive.nefs");

		var file1Id = new NefsItemId(0);
		var file1Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 11, 12, 13 }, TestHelpers.TestTransform);
		var file1DataSource = new NefsItemListDataSource(items, 123, new NefsItemSize(456, file1Chunks));
		var file1 = TestHelpers.CreateFile(file1Id.Value, file1Id.Value, "file1", file1DataSource);
		items.Add(file1);

		var file2Id = new NefsItemId(1);
		var file2Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 14, 15, 16 }, TestHelpers.TestTransform);
		var file2DataSource = new NefsItemListDataSource(items, 456, new NefsItemSize(789, file2Chunks));
		var file2 = TestHelpers.CreateFile(file2Id.Value, file2Id.Value, "file2", file2DataSource);
		items.Add(file2);

		var dir2Id = new NefsItemId(2);
		var dir1 = TestHelpers.CreateDirectory(dir2Id.Value, dir2Id.Value, "dir1");
		items.Add(dir1);

		var file3 = TestHelpers.CreateFile(3, 3, "file3", file1DataSource, file1Id.Value);
		items.Add(file3);

		var builder = new NefsHeaderBuilder160();
		var header = builder.Build(new NefsHeader160(), items, new NefsProgress());
		var p7 = header.WriteableSharedEntryInfoTable;

		Assert.Equal(3, p7.Entries.Count);

		// NOTES : Part 7 items are ordered in the same way that part 2 items are ordered (depth first by name).

		/*
		dir1
		*/

		Assert.Equal(2u, p7.Entries[0].PatchedEntry);
		Assert.Equal(2u, p7.Entries[0].NextSibling);

		/*
		file1
		*/

		Assert.Equal(0u, p7.Entries[1].PatchedEntry);
		Assert.Equal(1u, p7.Entries[1].NextSibling);

		/*
		file2
		*/

		Assert.Equal(1u, p7.Entries[2].PatchedEntry);
		Assert.Equal(2u, p7.Entries[2].NextSibling);
	}
}
