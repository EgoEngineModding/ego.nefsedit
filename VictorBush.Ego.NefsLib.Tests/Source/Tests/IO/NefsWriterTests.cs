// See LICENSE.txt for license information.

using System.IO.Abstractions.TestingHelpers;
using System.Runtime.InteropServices;
using VictorBush.Ego.NefsLib.IO;
using Xunit;

namespace VictorBush.Ego.NefsLib.Tests.IO;

public class NefsWriterTests
{
	private const string TempDir = @"C:\temp";
	private readonly MockFileSystem fileSystem = new MockFileSystem();
	private readonly INefsTransformer transformer;

	public NefsWriterTests()
	{
		this.fileSystem.AddDirectory(TempDir);
		this.transformer = new NefsTransformer(this.fileSystem);
	}

	[Fact]
	public async Task EncodeXorIntro()
	{
		var input = Enumerable.Range(-32, 32).ToArray();
		var inputBuffer = MemoryMarshal.Cast<int, byte>(input).ToArray();
		var inputStream = new MemoryStream(inputBuffer);
		var expectedBuffer = new byte[]
		{
			0xEC, 0xFF, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xEB, 0xFF, 0xFF, 0xFF, 0xE8, 0xFF,
			0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0xE1, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xEA, 0xFF,
			0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
			0x1C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x18, 0x00,
			0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
			0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0xFF, 0xFF
		};

		// Act
		await NefsWriter.EncodeXorIntroAsync(inputStream, 0, CancellationToken.None).ConfigureAwait(false);

		// Assert
		var actualBuffer = inputStream.ToArray();
		//var str = string.Join(',', actualBuffer.Select(x => $"0x{x:X2}"));
		Assert.Equal(expectedBuffer, actualBuffer);
	}

	private NefsWriter CreateWriter()
	{
		return new NefsWriter(TempDir, this.fileSystem, this.transformer);
	}
}
