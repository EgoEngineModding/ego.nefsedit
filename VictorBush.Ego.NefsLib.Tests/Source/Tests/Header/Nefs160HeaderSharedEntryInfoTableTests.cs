// See LICENSE.txt for license information.

using VictorBush.Ego.NefsLib.DataSource;
using VictorBush.Ego.NefsLib.Header;
using VictorBush.Ego.NefsLib.Item;
using Xunit;

namespace VictorBush.Ego.NefsLib.Tests.Header;

public class Nefs160HeaderSharedEntryInfoTableTests
{
	[Fact]
	public void NefsHeaderPart2_MultipleItems_EntriesPopulated()
	{
		var items = new NefsItemList(@"C:\archive.nefs");

		var file1Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 11, 12, 13 }, TestHelpers.TestTransform);
		var file1DataSource = new NefsItemListDataSource(items, 123, new NefsItemSize(456, file1Chunks));
		var file1 = TestHelpers.CreateFile(0, 0, "file1", file1DataSource);
		items.Add(file1);

		var file2Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 14, 15, 16 }, TestHelpers.TestTransform);
		var file2DataSource = new NefsItemListDataSource(items, 456, new NefsItemSize(789, file2Chunks));
		var file2 = TestHelpers.CreateFile(1, 1, "file2", file2DataSource);
		items.Add(file2);

		var dir1 = TestHelpers.CreateDirectory(2, 2, "dir1");
		items.Add(dir1);

		var file3Chunks = NefsDataChunk.CreateChunkList(new List<uint> { 22, 23, 24 }, TestHelpers.TestTransform);
		var file3DataSource = new NefsItemListDataSource(items, 222, new NefsItemSize(333, file3Chunks));
		var file3 = TestHelpers.CreateFile(3, dir1.Id.Value, "file3", file3DataSource);
		items.Add(file3);

		var p3 = new NefsHeaderPart3(items);
		var p2 = new Nefs160HeaderSharedEntryInfoTable(items, p3);

		Assert.Equal(4, p2.EntriesByIndex.Count);

		// NOTE: Part 3 is the strings table. So offset into p3 must take into account null terminated file/dir names.
		// Also note strings table is alphabetized. Also note the data file name is added to the strings table.

		// NOTE: The order of part 2 is generated by depth first traversal of the file tree, with items sorted by filename.

		/*
		dir1
		*/

		Assert.Equal(2, (int)p2.EntriesByIndex[0].Id.Value);
		Assert.Equal(2, (int)p2.EntriesByIndex[0].DirectoryId.Value);
		Assert.Equal(3, (int)p2.EntriesByIndex[0].FirstChildId.Value);
		Assert.Equal(0, (int)p2.EntriesByIndex[0].ExtractedSize);
		Assert.Equal(13, (int)p2.EntriesByIndex[0].OffsetIntoPart3);

		/*
		file3
		*/

		Assert.Equal(3, (int)p2.EntriesByIndex[1].Id.Value);
		Assert.Equal(2, (int)p2.EntriesByIndex[1].DirectoryId.Value);
		Assert.Equal(3, (int)p2.EntriesByIndex[1].FirstChildId.Value);
		Assert.Equal(333, (int)p2.EntriesByIndex[1].ExtractedSize);
		Assert.Equal(30, (int)p2.EntriesByIndex[1].OffsetIntoPart3);

		/*
		file1
		*/

		Assert.Equal(0, (int)p2.EntriesByIndex[2].Id.Value);
		Assert.Equal(0, (int)p2.EntriesByIndex[2].DirectoryId.Value);
		Assert.Equal(0, (int)p2.EntriesByIndex[2].FirstChildId.Value);
		Assert.Equal(456, (int)p2.EntriesByIndex[2].ExtractedSize);
		Assert.Equal(18, (int)p2.EntriesByIndex[2].OffsetIntoPart3);

		/*
		file2
		*/

		Assert.Equal(1, (int)p2.EntriesByIndex[3].Id.Value);
		Assert.Equal(1, (int)p2.EntriesByIndex[3].DirectoryId.Value);
		Assert.Equal(1, (int)p2.EntriesByIndex[3].FirstChildId.Value);
		Assert.Equal(789, (int)p2.EntriesByIndex[3].ExtractedSize);
		Assert.Equal(24, (int)p2.EntriesByIndex[3].OffsetIntoPart3);
	}

	[Fact]
	public void NefsHeaderPart2_NoItems_EntriesEmpty()
	{
		var items = new NefsItemList(@"C:\archive.nefs");
		var p3 = new NefsHeaderPart3(items);
		var p2 = new Nefs160HeaderSharedEntryInfoTable(items, p3);
		Assert.Empty(p2.EntriesByIndex);
	}
}
